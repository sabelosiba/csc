import java.io.File;
import java.io.IOException;
import javax.imageio.ImageIO;
import java.awt.image.BufferedImage;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.RecursiveAction;

public class MeanFilterParallel extends RecursiveAction{

    private int width, height, window;
    private int offX, offY, numpixel;
    private BufferedImage image;
    private int loop;
    
    protected static int THRESHOLD = 3480*2160;
    
    public MeanFilterParallel(int offX, int width, int offY,int height, int window, BufferedImage image){
        image = this.image;
        width = this.width;
        height = this.height;
        window = this.window;
        offX = this.offX;
        offY = this.offY;
        loop = (window-1)/2;
        numpixel = window*window;
    }
    
    public void compute(){
        if(window%2 !=0 && window >= 3){
            int area = width*height;
            if(area < THRESHOLD){
                computeDirectly();
            }else{
                int splitX = (int) Math.floor((double) width/2);
                int splitY = (int) Math.floor((double) height/2);
                MeanFilterParallel left = new MeanFilterParallel(0, splitX, 0, splitY, window, image);
                MeanFilterParallel right = new MeanFilterParallel(splitX, width-splitX, splitY, height-splitY, window, image);
                left.fork();
                right.compute();
                left.join();
            }
        }else{
            System.exit(0);
        }
    }
    
    protected void computeDirectly(){
        for(int X=offX ; X < (width-window)+offX; X++){
            for(int Y=loop+offY; Y<height+offY; Y++ ){
                double red=0, green=0, blue=0;
                for(int column = X; column<X+window; column++){
                    for(int mi=-loop; mi<=loop; mi++){
                        int col = Math.min(Math.max(mi+Y,0), offY+height -1);
                        int pixel = image.getRGB(column, col);
                        red += (pixel & 0x00ff0000) >> 16;
                        green += (pixel & 0x0000ff00) >> 8;
                        blue += (pixel & 0x000000ff) >> 0;
                    }
                }
                int dpixel = (0xff000000) | (((int) red/(window*window)) << 16) | (((int) green/(window*window)) << 8) | (((int) blue/ (window*window))<< 0);
                image.setRGB(X,Y,dpixel);
            }
        }
    }
    
    public static void main(String args[]){
        BufferedImage ima = null;
        String inn = "";
        String out = "";
        int wwidth =0;
        int imgwidth = 0;
        int imgheight=0;
        
        if(args.length > 0){
            inn = args[0];
            out = args[1];
            wwidth = Integer.parseInt(args[2]);
        }else{
            System.exit(0);
        }
        
        try{
            File m = new File("/home/sabelo/csc2/data/index.jpeg");
            BufferedImage aa = ImageIO.read(m);
            imgwidth = aa.getWidth();
            imgheight = aa.getHeight();
            ima = new BufferedImage(imgwidth, imgheight, BufferedImage.TYPE_INT_RGB);
            ima = ImageIO.read(m);
            
        }catch(IOException e){
            System.out.println("Error reading");
        }
        MeanFilterParallel mmParallel = new MeanFilterParallel(0, imgwidth, 0, imgheight, wwidth, ima);
        ForkJoinPool pool = new ForkJoinPool();
        long start = System.currentTimeMillis();
        pool.invoke(mmParallel);
        System.out.println("Execution time " + ((double)(System.currentTimeMillis()-start)/1000) + ", for window:" + wwidth + " and image: " +imgwidth+" x " +imgheight );
        
        try{
            File fa = new File("/home/sabelo/csc2/data/asss.jpeg");
            ImageIO.write(ima, "jpeg", fa);
        }catch(IOException e){
            System.out.println("Error write ");
        }
    }
}

